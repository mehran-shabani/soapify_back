version: '3.8'

services:
  # Production PostgreSQL with backup
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis with persistence
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application
  web:
    build: .
    command: gunicorn --bind 0.0.0.0:8000 --workers 8 --worker-class gevent --worker-connections 1000 --timeout 120 --max-requests 1000 --max-requests-jitter 100 soapify.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Workers with different queues
  celery-worker-default:
    build: .
    command: celery -A soapify worker --loglevel=info --concurrency=4 --queues=default --hostname=worker-default@%h
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-worker-stt:
    build: .
    command: celery -A soapify worker --loglevel=info --concurrency=2 --queues=stt --hostname=worker-stt@%h
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-worker-nlp:
    build: .
    command: celery -A soapify worker --loglevel=info --concurrency=2 --queues=nlp --hostname=worker-nlp@%h
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-worker-outputs:
    build: .
    command: celery -A soapify worker --loglevel=info --concurrency=2 --queues=outputs --hostname=worker-outputs@%h
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Celery Beat
  celery-beat:
    build: .
    command: celery -A soapify beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Celery Flower
  flower:
    build: .
    command: celery -A soapify flower --port=5555 --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    env_file:
      - .env.prod
    depends_on:
      - redis
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`flower.${DOMAIN}`)"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    restart: unless-stopped

  # Database backup service
  db-backup:
    image: postgres:15
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    command: /scripts/backup.sh
    depends_on:
      - db
    restart: "no"
    profiles:
      - backup

  # Log aggregation
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.5.0
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - logging

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: