# Generated by Django 5.2.5 on 2025-08-22 09:39

import django.db.models.deletion
import embeddings.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('encounters', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmbeddingIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('model_name', models.CharField(max_length=50)),
                ('dimension', models.PositiveIntegerField()),
                ('total_embeddings', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EmbeddingCollection',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('embeddings.embeddingindex',),
        ),
        migrations.CreateModel(
            name='TextEmbedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('transcript', 'Transcript Segment'), ('soap_draft', 'SOAP Draft'), ('soap_final', 'SOAP Final'), ('notes', 'Clinical Notes'), ('checklist', 'Checklist Item')], max_length=20)),
                ('content_id', models.PositiveIntegerField(help_text='ID of the related content object')),
                ('text_content', models.TextField(help_text='Original text that was embedded')),
                ('embedding_vector', models.JSONField(help_text='Embedding vector as JSON array (length = 1536)', validators=[embeddings.models.validate_embedding_list])),
                ('model_name', models.CharField(default='text-embedding-3-small', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='embeddings', to='encounters.encounter')),
            ],
        ),
        migrations.CreateModel(
            name='EmbeddingVector',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('embeddings.textembedding',),
        ),
        migrations.CreateModel(
            name='SimilaritySearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_text', models.TextField()),
                ('query_embedding', models.JSONField(help_text='Embedding vector of the query (JSON array length = 1536)', validators=[embeddings.models.validate_embedding_list])),
                ('results', models.JSONField(help_text='Cached search results')),
                ('similarity_threshold', models.FloatField(default=0.7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('encounter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='encounters.encounter')),
            ],
            options={
                'indexes': [models.Index(fields=['encounter', 'created_at'], name='embeddings__encount_282c0c_idx'), models.Index(fields=['created_at'], name='embeddings__created_ea4016_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='textembedding',
            index=models.Index(fields=['encounter', 'content_type'], name='embeddings__encount_458f2b_idx'),
        ),
        migrations.AddIndex(
            model_name='textembedding',
            index=models.Index(fields=['content_type', 'content_id'], name='embeddings__content_be4c19_idx'),
        ),
        migrations.AddIndex(
            model_name='textembedding',
            index=models.Index(fields=['created_at'], name='embeddings__created_9a8086_idx'),
        ),
        migrations.AddConstraint(
            model_name='textembedding',
            constraint=models.UniqueConstraint(fields=('encounter', 'content_type', 'content_id'), name='uniq_encounter_contenttype_contentid'),
        ),
    ]
