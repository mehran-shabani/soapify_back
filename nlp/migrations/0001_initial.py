# Generated by Django 5.2.5 on 2025-08-22 09:39

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('encounters', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SOAPDraft',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('extracting', 'Extracting'), ('draft', 'Draft'), ('reviewed', 'Reviewed'), ('finalized', 'Finalized'), ('error', 'Error')], default='extracting', max_length=20)),
                ('soap_data', models.JSONField(default=dict, help_text='SOAP structure as JSON')),
                ('confidence_score', models.FloatField(blank=True, help_text='Overall confidence score', null=True)),
                ('extraction_version', models.CharField(default='v1.0', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('version', models.PositiveIntegerField(default=1)),
                ('encounter', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='soap_draft', to='encounters.encounter')),
            ],
            options={
                'db_table': 'soap_drafts',
            },
        ),
        migrations.CreateModel(
            name='ExtractionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_used', models.CharField(default='gpt-4o-mini', max_length=50)),
                ('prompt_version', models.CharField(default='v1.0', max_length=20)),
                ('input_text_length', models.IntegerField()),
                ('output_json_length', models.IntegerField(blank=True, null=True)),
                ('processing_time_seconds', models.FloatField(blank=True, null=True)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('success', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('soap_draft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extraction_logs', to='nlp.soapdraft')),
            ],
            options={
                'db_table': 'extraction_logs',
            },
        ),
        migrations.CreateModel(
            name='ChecklistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_id', models.CharField(help_text='Unique identifier for checklist item', max_length=100)),
                ('section', models.CharField(help_text='SOAP section (subjective/objective/assessment/plan)', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('item_type', models.CharField(choices=[('required', 'Required'), ('recommended', 'Recommended'), ('optional', 'Optional')], default='required', max_length=20)),
                ('status', models.CharField(choices=[('missing', 'Missing'), ('partial', 'Partial'), ('complete', 'Complete'), ('not_applicable', 'Not Applicable')], default='missing', max_length=20)),
                ('weight', models.IntegerField(default=5, help_text='Importance weight (1-10)')),
                ('confidence', models.FloatField(blank=True, help_text='AI confidence in status assessment', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or suggestions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('soap_draft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checklist_items', to='nlp.soapdraft')),
            ],
            options={
                'db_table': 'checklist_items',
            },
        ),
        migrations.CreateModel(
            name='SOAPSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('subjective', 'Subjective'), ('objective', 'Objective'), ('assessment', 'Assessment'), ('plan', 'Plan')], max_length=20)),
                ('content', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('soap_draft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='nlp.soapdraft')),
            ],
            options={
                'db_table': 'soap_sections',
            },
        ),
        migrations.CreateModel(
            name='ExtractionTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('full_soap', 'Full SOAP'), ('section_update', 'Section Update')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extraction_tasks', to='encounters.encounter')),
            ],
            options={
                'db_table': 'extraction_tasks',
                'indexes': [models.Index(fields=['encounter', 'status'], name='extraction__encount_333c54_idx'), models.Index(fields=['created_at'], name='extraction__created_5134f7_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='soapdraft',
            index=models.Index(fields=['encounter'], name='soap_drafts_encount_bf6bd7_idx'),
        ),
        migrations.AddIndex(
            model_name='soapdraft',
            index=models.Index(fields=['status'], name='soap_drafts_status_ab6c18_idx'),
        ),
        migrations.AddIndex(
            model_name='soapdraft',
            index=models.Index(fields=['created_at'], name='soap_drafts_created_23e729_idx'),
        ),
        migrations.AddIndex(
            model_name='extractionlog',
            index=models.Index(fields=['soap_draft', 'created_at'], name='extraction__soap_dr_350f57_idx'),
        ),
        migrations.AddIndex(
            model_name='extractionlog',
            index=models.Index(fields=['success', 'created_at'], name='extraction__success_7bdfd2_idx'),
        ),
        migrations.AddIndex(
            model_name='checklistitem',
            index=models.Index(fields=['soap_draft', 'status'], name='checklist_i_soap_dr_a0f0dc_idx'),
        ),
        migrations.AddIndex(
            model_name='checklistitem',
            index=models.Index(fields=['section', 'item_type'], name='checklist_i_section_0c2593_idx'),
        ),
        migrations.AddIndex(
            model_name='checklistitem',
            index=models.Index(fields=['status', 'weight'], name='checklist_i_status_a52a08_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='checklistitem',
            unique_together={('soap_draft', 'item_id')},
        ),
        migrations.AddIndex(
            model_name='soapsection',
            index=models.Index(fields=['soap_draft', 'section_type'], name='soap_sectio_soap_dr_74b7ab_idx'),
        ),
    ]
