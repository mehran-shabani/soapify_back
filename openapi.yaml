swagger: "2.0"
info:
  title: "SOAPify API"
  description: "Official API documentation for SOAPify."
  contact:
    email: "support@soapify.app"
  license:
    name: "Proprietary"
  version: "v1"
host: "127.0.0.1:8000"
schemes:
  - "http"
basePath: "/"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  Basic:
    type: "basic"
security:
  - Basic: []
paths:
  /adminplus/api/export/:
    post:
      operationId: "adminplus_api_export_create"
      description: "Export system data."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "adminplus"
    parameters: []
  /adminplus/api/health/:
    get:
      operationId: "adminplus_api_health_list"
      description: "Get system health status."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "adminplus"
    parameters: []
  /adminplus/api/logs/:
    get:
      operationId: "adminplus_api_logs_list"
      description: "Get operation logs."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "adminplus"
    parameters: []
  /adminplus/api/tasks/:
    get:
      operationId: "adminplus_api_tasks_list"
      description: "Get task monitoring data."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "adminplus"
    parameters: []
  /adminplus/api/tasks/cancel/:
    post:
      operationId: "adminplus_api_tasks_cancel_create"
      description: "Cancel a running task."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "adminplus"
    parameters: []
  /adminplus/api/tasks/retry/:
    post:
      operationId: "adminplus_api_tasks_retry_create"
      description: "Retry a failed task."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "adminplus"
    parameters: []
  /adminplus/api/tasks/stats/:
    get:
      operationId: "adminplus_api_tasks_stats_list"
      description: "Get task execution statistics."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "adminplus"
    parameters: []
  /api/analytics/activity/:
    post:
      operationId: "api_analytics_activity_create"
      summary: "Record user activity."
      description: "Body parameters:\n- action: Action name (required)\n- resource: Resource name (optional)\n- resource_id: Resource ID (optional)\n- metadata: Additional metadata (optional)"
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/analytics/alerts/:
    get:
      operationId: "api_analytics_alerts_list"
      description: "Get active alerts."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/analytics/alerts/check/:
    post:
      operationId: "api_analytics_alerts_check_create"
      description: "Manually trigger alert rule checking."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/analytics/alerts/{alert_id}/acknowledge/:
    post:
      operationId: "api_analytics_alerts_acknowledge_create"
      description: "Acknowledge an alert."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "alert_id"
        in: "path"
        required: true
        type: "string"
  /api/analytics/business-metrics/:
    post:
      operationId: "api_analytics_business-metrics_create"
      summary: "Calculate business metrics for a specific period."
      description: "Body parameters:\n- date_from: Start date (YYYY-MM-DD)\n- date_to: End date (YYYY-MM-DD)"
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/analytics/metric/:
    post:
      operationId: "api_analytics_metric_create"
      summary: "Record a custom metric."
      description: "Body parameters:\n- name: Metric name (required)\n- value: Metric value (required)\n- metric_type: Type of metric (default: gauge)\n- tags: Metric tags (optional)"
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/analytics/overview:
    get:
      operationId: "api_analytics_overview_list"
      description: "Get system overview metrics."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/analytics/performance:
    get:
      operationId: "api_analytics_performance_list"
      summary: "Get API performance analytics."
      description: "Query parameters:\n- days: Number of days to analyze (default: 7)"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/analytics/users:
    get:
      operationId: "api_analytics_users_list"
      summary: "Get user analytics."
      description: "Query parameters:\n- user_id: Specific user ID (optional)\n- days: Number of days to analyze (default: 30)"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/audio/commit/:
    post:
      operationId: "api_audio_commit_create"
      description: "Commit an uploaded audio file."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/audio/presigned-url/:
    post:
      operationId: "api_audio_presigned-url_create"
      description: "Generate a pre-signed URL for uploading audio files to S3."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/auth/login/:
    post:
      operationId: "api_auth_login_create"
      description: "Login endpoint that returns auth token."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/auth/logout/:
    post:
      operationId: "api_auth_logout_create"
      description: "Logout endpoint that deletes auth token."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/auth/token/:
    post:
      operationId: "api_auth_token_create"
      description: "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/TokenObtainPair"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/TokenObtainPair"
      tags:
        - "api"
    parameters: []
  /api/auth/token/refresh/:
    post:
      operationId: "api_auth_token_refresh_create"
      description: "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/TokenRefresh"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/TokenRefresh"
      tags:
        - "api"
    parameters: []
  /api/auth/token/verify/:
    post:
      operationId: "api_auth_token_verify_create"
      description: "Takes a token and indicates if it is valid.  This view provides no\ninformation about a token's fitness for a particular use."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/TokenVerify"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/TokenVerify"
      tags:
        - "api"
    parameters: []
  /api/checklist/catalog/:
    get:
      operationId: "api_checklist_catalog_list"
      description: "ViewSet for managing checklist catalog items."
      parameters:
        - name: "page"
          in: "query"
          description: "A page number within the paginated result set."
          required: false
          type: "integer"
      responses:
        200:
          description: ""
          schema:
            required:
              - "count"
              - "results"
            type: "object"
            properties:
              count:
                type: "integer"
              next:
                type: "string"
                format: "uri"
                x-nullable: true
              previous:
                type: "string"
                format: "uri"
                x-nullable: true
              results:
                type: "array"
                items:
                  $ref: "#/definitions/ChecklistCatalog"
      tags:
        - "api"
    post:
      operationId: "api_checklist_catalog_create"
      description: "ViewSet for managing checklist catalog items."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistCatalog"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistCatalog"
      tags:
        - "api"
    parameters: []
  /api/checklist/catalog/{id}/:
    get:
      operationId: "api_checklist_catalog_read"
      description: "ViewSet for managing checklist catalog items."
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistCatalog"
      tags:
        - "api"
    put:
      operationId: "api_checklist_catalog_update"
      description: "ViewSet for managing checklist catalog items."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistCatalog"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistCatalog"
      tags:
        - "api"
    patch:
      operationId: "api_checklist_catalog_partial_update"
      description: "ViewSet for managing checklist catalog items."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistCatalog"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistCatalog"
      tags:
        - "api"
    delete:
      operationId: "api_checklist_catalog_delete"
      description: "ViewSet for managing checklist catalog items."
      parameters: []
      responses:
        204:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "id"
        in: "path"
        description: "A unique integer value identifying this checklist catalog."
        required: true
        type: "integer"
  /api/checklist/evaluations/:
    get:
      operationId: "api_checklist_evaluations_list"
      description: "ViewSet for managing checklist evaluations."
      parameters:
        - name: "page"
          in: "query"
          description: "A page number within the paginated result set."
          required: false
          type: "integer"
      responses:
        200:
          description: ""
          schema:
            required:
              - "count"
              - "results"
            type: "object"
            properties:
              count:
                type: "integer"
              next:
                type: "string"
                format: "uri"
                x-nullable: true
              previous:
                type: "string"
                format: "uri"
                x-nullable: true
              results:
                type: "array"
                items:
                  $ref: "#/definitions/ChecklistEval"
      tags:
        - "api"
    post:
      operationId: "api_checklist_evaluations_create"
      description: "ViewSet for managing checklist evaluations."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistEval"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistEval"
      tags:
        - "api"
    parameters: []
  /api/checklist/evaluations/evaluate_encounter/:
    post:
      operationId: "api_checklist_evaluations_evaluate_encounter"
      description: "Trigger checklist evaluation for an encounter."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistEval"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistEval"
      tags:
        - "api"
    parameters: []
  /api/checklist/evaluations/summary/:
    get:
      operationId: "api_checklist_evaluations_summary"
      description: "Get checklist summary for an encounter."
      parameters:
        - name: "page"
          in: "query"
          description: "A page number within the paginated result set."
          required: false
          type: "integer"
      responses:
        200:
          description: ""
          schema:
            required:
              - "count"
              - "results"
            type: "object"
            properties:
              count:
                type: "integer"
              next:
                type: "string"
                format: "uri"
                x-nullable: true
              previous:
                type: "string"
                format: "uri"
                x-nullable: true
              results:
                type: "array"
                items:
                  $ref: "#/definitions/ChecklistEval"
      tags:
        - "api"
    parameters: []
  /api/checklist/evaluations/{id}/:
    get:
      operationId: "api_checklist_evaluations_read"
      description: "ViewSet for managing checklist evaluations."
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistEval"
      tags:
        - "api"
    put:
      operationId: "api_checklist_evaluations_update"
      description: "ViewSet for managing checklist evaluations."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistEval"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistEval"
      tags:
        - "api"
    patch:
      operationId: "api_checklist_evaluations_partial_update"
      description: "ViewSet for managing checklist evaluations."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistEval"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistEval"
      tags:
        - "api"
    delete:
      operationId: "api_checklist_evaluations_delete"
      description: "ViewSet for managing checklist evaluations."
      parameters: []
      responses:
        204:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "id"
        in: "path"
        description: "A unique integer value identifying this checklist eval."
        required: true
        type: "integer"
  /api/checklist/templates/:
    get:
      operationId: "api_checklist_templates_list"
      description: "ViewSet for managing checklist templates."
      parameters:
        - name: "page"
          in: "query"
          description: "A page number within the paginated result set."
          required: false
          type: "integer"
      responses:
        200:
          description: ""
          schema:
            required:
              - "count"
              - "results"
            type: "object"
            properties:
              count:
                type: "integer"
              next:
                type: "string"
                format: "uri"
                x-nullable: true
              previous:
                type: "string"
                format: "uri"
                x-nullable: true
              results:
                type: "array"
                items:
                  $ref: "#/definitions/ChecklistTemplate"
      tags:
        - "api"
    post:
      operationId: "api_checklist_templates_create"
      description: "ViewSet for managing checklist templates."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      tags:
        - "api"
    parameters: []
  /api/checklist/templates/{id}/:
    get:
      operationId: "api_checklist_templates_read"
      description: "ViewSet for managing checklist templates."
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      tags:
        - "api"
    put:
      operationId: "api_checklist_templates_update"
      description: "ViewSet for managing checklist templates."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      tags:
        - "api"
    patch:
      operationId: "api_checklist_templates_partial_update"
      description: "ViewSet for managing checklist templates."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      tags:
        - "api"
    delete:
      operationId: "api_checklist_templates_delete"
      description: "ViewSet for managing checklist templates."
      parameters: []
      responses:
        204:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "id"
        in: "path"
        description: "A unique integer value identifying this checklist template."
        required: true
        type: "integer"
  /api/checklist/templates/{id}/catalog_items/:
    get:
      operationId: "api_checklist_templates_catalog_items"
      description: "Get catalog items for this template."
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ChecklistTemplate"
      tags:
        - "api"
    parameters:
      - name: "id"
        in: "path"
        description: "A unique integer value identifying this checklist template."
        required: true
        type: "integer"
  /api/encounters/:
    get:
      operationId: "api_encounters_list"
      description: "List user's encounters."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/encounters/create/:
    post:
      operationId: "api_encounters_create_create"
      description: "Create a new medical encounter."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/encounters/{encounter_id}/:
    get:
      operationId: "api_encounters_read"
      description: "Get encounter details with audio chunks."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/integrations/health/:
    get:
      operationId: "api_integrations_health_list"
      description: "Get health status of all external integrations."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/integrations/logout/:
    post:
      operationId: "api_integrations_logout_create"
      description: "Logout and revoke JWT window."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/integrations/otp/send/:
    post:
      operationId: "api_integrations_otp_send_create"
      description: "Send OTP for authentication."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/integrations/otp/verify/:
    post:
      operationId: "api_integrations_otp_verify_create"
      description: "Verify OTP and create JWT window."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/integrations/patients/search/:
    get:
      operationId: "api_integrations_patients_search_list"
      description: "Search patients via Helssa (read-only)."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/integrations/patients/{patient_ref}/access/:
    post:
      operationId: "api_integrations_patients_access_create"
      description: "Request access to patient data via Helssa."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "patient_ref"
        in: "path"
        required: true
        type: "string"
  /api/integrations/patients/{patient_ref}/info/:
    get:
      operationId: "api_integrations_patients_info_list"
      description: "Get basic patient information (no PHI)."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "patient_ref"
        in: "path"
        required: true
        type: "string"
  /api/integrations/session/extend/:
    post:
      operationId: "api_integrations_session_extend_create"
      description: "Extend current JWT window."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/integrations/session/status/:
    get:
      operationId: "api_integrations_session_status_list"
      description: "Get current session status and remaining time."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/nlp/drafts/{encounter_id}/:
    get:
      operationId: "api_nlp_drafts_read"
      description: "Get SOAP draft for an encounter."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/nlp/drafts/{encounter_id}/checklist/:
    get:
      operationId: "api_nlp_drafts_checklist_list"
      description: "Get dynamic checklist for an encounter."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/nlp/drafts/{encounter_id}/checklist/{item_id}/:
    put:
      operationId: "api_nlp_drafts_checklist_update"
      description: "Update checklist item status manually."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
      - name: "item_id"
        in: "path"
        required: true
        type: "string"
  /api/nlp/drafts/{encounter_id}/update-section/:
    put:
      operationId: "api_nlp_drafts_update-section_update"
      description: "Update a specific section of SOAP draft."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/nlp/generate/{encounter_id}/:
    post:
      operationId: "api_nlp_generate_create"
      description: "Start SOAP extraction for an encounter."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/outputs/access/{link_id}/:
    get:
      operationId: "api_outputs_access_read"
      description: "Public endpoint for patients to access their SOAP note."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "link_id"
        in: "path"
        required: true
        type: "string"
  /api/outputs/download/{file_id}/:
    post:
      operationId: "api_outputs_download_create"
      description: "Generate presigned download URL for an output file."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
  /api/outputs/files/{encounter_id}/:
    get:
      operationId: "api_outputs_files_read"
      description: "List all output files for an encounter."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/outputs/finalize/:
    post:
      operationId: "api_outputs_finalize_create"
      description: "Start SOAP finalization process."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/outputs/finalized/{encounter_id}/:
    get:
      operationId: "api_outputs_finalized_read"
      description: "Get finalized SOAP for an encounter."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/outputs/link-patient/:
    post:
      operationId: "api_outputs_link-patient_create"
      description: "Create patient link for sharing SOAP note."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/search/:
    get:
      operationId: "api_search_list"
      summary: "Perform hybrid search across all content."
      description: "Query parameters:\n- q: Search query (required)\n- encounter_id: Filter by encounter ID\n- content_type: Filter by content type (transcript, soap, checklist, notes)\n- date_from: Filter by date from (YYYY-MM-DD)\n- date_to: Filter by date to (YYYY-MM-DD)\n- page: Page number for pagination\n- page_size: Number of results per page (default: 20)"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/search/analytics/:
    get:
      operationId: "api_search_analytics_list"
      summary: "Get search analytics."
      description: "Query parameters:\n- days: Number of days to analyze (default: 30)"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/search/reindex/:
    post:
      operationId: "api_search_reindex_create"
      summary: "Reindex all content for a specific encounter."
      description: "Body parameters:\n- encounter_id: ID of the encounter to reindex (required)"
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/search/suggestions/:
    get:
      operationId: "api_search_suggestions_list"
      summary: "Get search suggestions based on query prefix."
      description: "Query parameters:\n- q: Query prefix (required)\n- limit: Maximum number of suggestions (default: 10)"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/stt/bulk-transcribe/:
    post:
      operationId: "api_stt_bulk-transcribe_create"
      description: "Queue bulk transcription for list of committed chunk ids."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/stt/encounter/{encounter_id}/process/:
    post:
      operationId: "api_stt_encounter_process_create"
      description: "Start STT processing for all committed audio chunks in an encounter."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/stt/encounter/{encounter_id}/transcript/:
    get:
      operationId: "api_stt_encounter_transcript_list"
      description: "Get full transcript for all audio chunks in an encounter."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "encounter_id"
        in: "path"
        required: true
        type: "string"
  /api/stt/history/:
    get:
      operationId: "api_stt_history_list"
      description: "Return transcript history for an encounter (required: encounter_id)."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/stt/search/:
    get:
      operationId: "api_stt_search_list"
      description: "Search transcript segments by text."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/stt/status/{task_id}/:
    get:
      operationId: "api_stt_status_read"
      description: "Return Celery task status and result if available."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "task_id"
        in: "path"
        required: true
        type: "string"
  /api/stt/transcribe/:
    post:
      operationId: "api_stt_transcribe_create"
      description: "Start STT processing for a specific audio chunk.\nExpected body: {\"chunk_id\": <int>}"
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/stt/transcript/segment/{segment_id}/:
    put:
      operationId: "api_stt_transcript_segment_update"
      description: "Update a transcript segment text (manual editing)."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "segment_id"
        in: "path"
        required: true
        type: "string"
  /api/stt/transcript/{audio_chunk_id}/:
    get:
      operationId: "api_stt_transcript_read"
      description: "Get transcript segments for an audio chunk."
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "audio_chunk_id"
        in: "path"
        required: true
        type: "string"
  /api/stt/upload-transcribe/:
    post:
      operationId: "api_stt_upload-transcribe_create"
      description: "Accept multipart file and transcribe directly via WhisperService."
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/uploads/chunk/:
    post:
      operationId: "api_uploads_chunk_create"
      description: ""
      parameters: []
      responses:
        201:
          description: ""
      consumes:
        - "multipart/form-data"
        - "application/x-www-form-urlencoded"
      tags:
        - "api"
    parameters: []
  /api/uploads/commit/:
    post:
      operationId: "api_uploads_commit_create"
      description: ""
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/uploads/final/{session_id}/:
    get:
      operationId: "api_uploads_final_read"
      description: ""
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "api"
    parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
  /api/uploads/s3/confirm/:
    post:
      operationId: "api_uploads_s3_confirm_create"
      description: ""
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/uploads/s3/presign/:
    post:
      operationId: "api_uploads_s3_presign_create"
      description: ""
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/uploads/session/create/:
    post:
      operationId: "api_uploads_session_create_create"
      description: ""
      parameters: []
      responses:
        201:
          description: ""
      tags:
        - "api"
    parameters: []
  /api/users/:
    get:
      operationId: "api_users_list"
      description: "List users or create a new user."
      parameters:
        - name: "page"
          in: "query"
          description: "A page number within the paginated result set."
          required: false
          type: "integer"
      responses:
        200:
          description: ""
          schema:
            required:
              - "count"
              - "results"
            type: "object"
            properties:
              count:
                type: "integer"
              next:
                type: "string"
                format: "uri"
                x-nullable: true
              previous:
                type: "string"
                format: "uri"
                x-nullable: true
              results:
                type: "array"
                items:
                  $ref: "#/definitions/User"
      tags:
        - "api"
    post:
      operationId: "api_users_create"
      description: "List users or create a new user."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UserCreate"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/UserCreate"
      tags:
        - "api"
    parameters: []
  /api/users/{id}/:
    get:
      operationId: "api_users_read"
      description: "Retrieve or update user details."
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/User"
      tags:
        - "api"
    put:
      operationId: "api_users_update"
      description: "Retrieve or update user details."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/User"
      tags:
        - "api"
    patch:
      operationId: "api_users_partial_update"
      description: "Retrieve or update user details."
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/User"
      tags:
        - "api"
    parameters:
      - name: "id"
        in: "path"
        description: "A unique integer value identifying this user."
        required: true
        type: "integer"
definitions:
  TokenObtainPair:
    required:
      - "username"
      - "password"
    type: "object"
    properties:
      username:
        title: "Username"
        type: "string"
        minLength: 1
      password:
        title: "Password"
        type: "string"
        minLength: 1
  TokenRefresh:
    required:
      - "refresh"
    type: "object"
    properties:
      refresh:
        title: "Refresh"
        type: "string"
        minLength: 1
      access:
        title: "Access"
        type: "string"
        readOnly: true
        minLength: 1
  TokenVerify:
    required:
      - "token"
    type: "object"
    properties:
      token:
        title: "Token"
        type: "string"
        minLength: 1
  ChecklistCatalog:
    required:
      - "title"
      - "description"
      - "category"
      - "question_template"
    type: "object"
    properties:
      id:
        title: "ID"
        type: "integer"
        readOnly: true
      title:
        title: "Title"
        type: "string"
        maxLength: 200
        minLength: 1
      description:
        title: "Description"
        type: "string"
        minLength: 1
      category:
        title: "Category"
        type: "string"
        enum:
          - "subjective"
          - "objective"
          - "assessment"
          - "plan"
          - "general"
      priority:
        title: "Priority"
        type: "string"
        enum:
          - "low"
          - "medium"
          - "high"
          - "critical"
      keywords:
        title: "Keywords"
        description: "Keywords to match in transcript"
        type: "object"
      question_template:
        title: "Question template"
        description: "Template for generating questions"
        type: "string"
        minLength: 1
      is_active:
        title: "Is active"
        type: "boolean"
      created_at:
        title: "Created at"
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        title: "Updated at"
        type: "string"
        format: "date-time"
        readOnly: true
  ChecklistEval:
    required:
      - "encounter"
      - "catalog_item_id"
      - "status"
    type: "object"
    properties:
      id:
        title: "ID"
        type: "integer"
        readOnly: true
      encounter:
        title: "Encounter"
        type: "integer"
      catalog_item:
        $ref: "#/definitions/ChecklistCatalog"
      catalog_item_id:
        title: "Catalog item id"
        type: "integer"
      status:
        title: "Status"
        type: "string"
        enum:
          - "covered"
          - "missing"
          - "partial"
          - "unclear"
      confidence_score:
        title: "Confidence score"
        description: "AI confidence score (0.0-1.0)"
        type: "number"
      evidence_text:
        title: "Evidence text"
        description: "Text from transcript that supports this evaluation"
        type: "string"
      anchor_positions:
        title: "Anchor positions"
        description: "Character positions in transcript"
        type: "object"
      generated_question:
        title: "Generated question"
        description: "Generated follow-up question"
        type: "string"
      notes:
        title: "Notes"
        type: "string"
      created_at:
        title: "Created at"
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        title: "Updated at"
        type: "string"
        format: "date-time"
        readOnly: true
  ChecklistTemplate:
    required:
      - "name"
      - "description"
    type: "object"
    properties:
      id:
        title: "ID"
        type: "integer"
        readOnly: true
      name:
        title: "Name"
        type: "string"
        maxLength: 100
        minLength: 1
      description:
        title: "Description"
        type: "string"
        minLength: 1
      specialty:
        title: "Specialty"
        type: "string"
        maxLength: 50
      is_default:
        title: "Is default"
        type: "boolean"
      catalog_items_count:
        title: "Catalog items count"
        type: "string"
        readOnly: true
      created_at:
        title: "Created at"
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        title: "Updated at"
        type: "string"
        format: "date-time"
        readOnly: true
  User:
    required:
      - "username"
    type: "object"
    properties:
      id:
        title: "ID"
        type: "integer"
        readOnly: true
      username:
        title: "Username"
        description: "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
        type: "string"
        pattern: "^[\\w.@+-]+$"
        maxLength: 150
        minLength: 1
      email:
        title: "Email address"
        type: "string"
        format: "email"
        maxLength: 254
      first_name:
        title: "First name"
        type: "string"
        maxLength: 150
      last_name:
        title: "Last name"
        type: "string"
        maxLength: 150
      role:
        title: "Role"
        type: "string"
        enum:
          - "doctor"
          - "admin"
      phone_number:
        title: "Phone number"
        type: "string"
        maxLength: 15
      updated_at:
        title: "Updated at"
        type: "string"
        format: "date-time"
        readOnly: true
  UserCreate:
    required:
      - "username"
      - "password"
    type: "object"
    properties:
      username:
        title: "Username"
        description: "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
        type: "string"
        pattern: "^[\\w.@+-]+$"
        maxLength: 150
        minLength: 1
      email:
        title: "Email address"
        type: "string"
        format: "email"
        maxLength: 254
      password:
        title: "Password"
        type: "string"
        minLength: 1
      first_name:
        title: "First name"
        type: "string"
        maxLength: 150
      last_name:
        title: "Last name"
        type: "string"
        maxLength: 150
      role:
        title: "Role"
        type: "string"
        enum:
          - "doctor"
          - "admin"
      phone_number:
        title: "Phone number"
        type: "string"
        maxLength: 15
